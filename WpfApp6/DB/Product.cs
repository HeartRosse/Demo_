//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp6.DB
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class Product : INotifyPropertyChanged, IDataErrorInfo
    {

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.OrderProduct = new HashSet<OrderProduct>();
        }

        public string Error
        {
            get => throw new NotImplementedException();
        }

        public string this[string name]
        {
            get
            {
                string error = null;
                switch (name)
                {
                    case "ProductArticleNumber":
                        if (string.IsNullOrEmpty(ProductArticleNumber))
                        {
                            error = "јртикул не может быть пустым";
                        }
                        break;
                    case "ProductName":
                        if (string.IsNullOrEmpty(ProductName))
                        {
                            error = "»м€ продукта не может быть пустым";
                        }
                        break;
                    case "ProductPrice":
                        if (ProductPrice < 0)
                        {
                            error = "÷ена не может быть отрицательной";
                        }
                        break;
                    case "ProductQuantity":
                        if (ProductQuantity < 0)
                        {
                            error = " оличество товара не может быть отрицательным";
                        }
                        break;
                    case "ProductDiscount":
                        if (ProductDiscount < 0)
                        {
                            error = "—кидка не может быть меньше нул€";
                        }
                        break;
                    case "ProductMaxDescount":
                        if (ProductMaxDescount < 0)
                        {
                            error = "ћаксимальна€ скидка не может быть меньше нул€";
                        }
                        break;
                }
                return error;
            }
        }

        public string ProductArticleNumber
        {
            get
            {
                return productArticleNumber;
            }
            set
            {
                productArticleNumber = value;
                OnPropertyChanged("ProductArticleNumber");
            }
        }
        public string ProductName
        {
            get
            {
                return productName;
            }
            set
            {
                productName = value;
                OnPropertyChanged("ProductName");
            }
        }

        private void OnPropertyChanged(string prop = "")
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(prop));
        }

        public string ProductDescription
        {
            get { return productDescription; }
            set
            {
                productDescription = value;
                OnPropertyChanged("ProductDescription");
            }
        }
        private string image;
        private string productName;
        private string productArticleNumber;
        private int? productQuantity;
        private decimal? productPrice;
        private int? productDiscount;
        private int? productMaxDescount;
        private string productDescription;
        private string productManufacturer;

        public event PropertyChangedEventHandler PropertyChanged;

        public string ProductPhoto
        {
            get
            {
                if (image == "")
                {
                    return "../Images/picture.png";
                }
                return "../Images/" + image;
            }
            set
            {
                image = value;
                OnPropertyChanged("ProductPhoto");
            }
        }
        public Nullable<decimal> ProductPrice
        {
            get
            {
                return productPrice;
            }
            set
            {
                productPrice = value;
                OnPropertyChanged("ProductPrice");
            }
        }
        public Nullable<int> ProductDiscount
        {
            get
            {
                return productDiscount;
            }
            set
            {
                productDiscount = value;
                OnPropertyChanged("ProductDiscount");
            }
        }
        public Nullable<int> ProductMaxDescount
        {
            get { return productMaxDescount; }
            set
            {
                productMaxDescount = value;
                OnPropertyChanged("ProductMaxDescount");
            }
        }
        public Nullable<int> ProductQuantity
        {
            get
            {
                return productQuantity;
            }
            set
            {
                productQuantity = value;
                OnPropertyChanged("ProductQuantity");
            }
        }
        public string ProductManufacturer
        {
            get { return productManufacturer; }
            set
            {
                productManufacturer = value;
                OnPropertyChanged("ProductManufacturer");
            }
        }

        public string ProductUnit { get; set; }
        public string ProductSupplier { get; set; }
        public string ProductCategory { get; set; }

        public virtual Category Category { get; set; }
        public virtual Manufacturer Manufacturer { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<OrderProduct> OrderProduct { get; set; }
        public virtual Unit Unit { get; set; }
        public virtual Supplier Supplier { get; set; }
    }
}
